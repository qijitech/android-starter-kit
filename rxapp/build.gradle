import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
  compileSdkVersion rootProject.ext.android.compileSdkVersion
  buildToolsVersion rootProject.ext.android.buildToolsVersion

  defaultConfig {
    applicationId "starter.kit.rx.app"
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode 1
    versionName "1.0"
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/rxjava.properties'
  }

  buildTypes {
     debug {
      applicationIdSuffix ".debug" // 为了不和 release 版本冲突
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    // if true, only report errors
    ignoreWarnings true
    abortOnError false
  }

  compileOptions {
    sourceCompatibility rootProject.ext.android.javaVersion
    targetCompatibility rootProject.ext.android.javaVersion
  }

  applicationVariants.all { variant ->
    if (variant.buildType.name == BuilderConstants.RELEASE) {
      variant.mergedFlavor.versionCode = gitVersionCode()
      variant.mergedFlavor.versionName = gitVersionName()

      variant.outputs.each { fileObj ->
        def outputFile = fileObj.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
          //def fileName = "rxjava_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
          def fileName = "${parent.name}_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
          fileObj.outputFile = new File(releaseOutputFile(), fileName)
        }
      }
    }
  }
}

repositories {
  jcenter()
  maven { url "https://clojars.org/repo/" }
  maven { url "https://jitpack.io" }
  maven { url "https://dl.bintray.com/qijitech/android/" }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile 'junit:junit:4.12'

  compile deps.cardviewV7
  compile deps.materialProgress

  compile 'org.parceler:parceler-api:1.1.6'
  annotationProcessor 'org.parceler:parceler:1.1.6'

  compile 'com.github.Doublemine:SimpleHud:0.1.2'
  compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

  compile 'com.github.bumptech.glide:glide:3.7.0'

  compile('com.mikepenz:materialdrawer:5.3.6@aar') {
    transitive = true
  }
  compile 'com.mikepenz:google-material-typeface:2.2.0.1@aar'
  compile 'com.mikepenz:fontawesome-typeface:4.4.0.1@aar'
  compile 'com.mikepenz:octicons-typeface:3.0.0.1@aar'

  compile deps.fresco

  compile 'com.f2prateek.rx.preferences2:rx-preferences:2.0.0-RC1'

  compile deps.recyclerviewFlexibleDivider

  compile deps.butterknife
  annotationProcessor 'com.jakewharton:butterknife-compiler:' + rootProject.ext.depsVersion.butterknifeVersion

  compile project(':rxlibrary')
  /*  compile project(':support-ui-core')
    compile project(':support-ui-adapters')
    compile project(':support-ui-cells')
    compile project(':support-ui-widget')*/
//  compile 'com.smartydroid:rxstarter:0.1'
}

static def gitVersionCode() {
  def cmd = 'git rev-list HEAD --all  --count'
//  def versionCode = cmd.execute().text.trim()
  def versionCode = ""
  if (versionCode.empty) {
    return 1
  }
  return versionCode.toInteger()
}

static def gitVersionName() {
  def cmd = 'git describe --abbrev=0 --tags'
//  def versionName = cmd.execute().text.trim()
  def versionName = "2"
  if (versionName.length() > 5 || versionName.length() <= 0) {
    return "1.0";
  }
  return versionName;
}

static def releaseTime() {
  return new Date().format('yyyyMMddHHmm', TimeZone.getDefault())
}

static def releaseOutputFile() {
  return '../release/'
}
